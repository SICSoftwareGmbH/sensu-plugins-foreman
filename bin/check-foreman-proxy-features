#!/usr/bin/env ruby
# frozen_string_literal: true

#
#   check-foreman-proxy-features
#
# DESCRIPTION:
#   Checks for required foreman-proxy features
#
# OUTPUT:
#   Plain text
#
# PLATFORMS:
#   Linux
#
# DEPENDENCIES:
#   gem: sensu-plugin
#
# LICENSE:
#   SIC! Software GmbH <info@sic.software>
#   Released under the same terms as Sensu (the MIT license); see LICENSE
#   for details.
#

require 'sensu-plugin/check/cli'
require 'net/https'
require 'json'

# Checks if foreman-proxy daemon is working
class CheckForemanProxy < Sensu::Plugin::Check::CLI
  DEFAULT_URL = 'https://localhost:8443/'

  option :url,
         short: '-u URL',
         long: '--url URL',
         description: 'URL of foreman-proxy',
         default: nil

  option :features,
         short: '-f FEATURES',
         long: '--features FEATURES',
         description: 'Comma separated list of required features',
         default: ''

  def run
    check
  rescue StandardError => e
    critical("Request error: #{e.message}")
  end

  private

  def url
    return config[:url] if config[:url]&.positive?

    DEFAULT_URL
  end

  def features
    config[:features].split(',').map(&:strip)
  end

  def features_response
    uri = URI.parse(File.join(url, 'features'))

    http = Net::HTTP.new(uri.host, uri.port, nil, nil)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    req = Net::HTTP::Get.new(uri.request_uri)

    http.request(req)
  end

  def parse_features_response(res)
    JSON.parse(res.body)
  end

  def process_available_features(available_features)
    missing = features - available_features
    unwanted = available_features - features

    if missing.any? || unwanted.any?
      messages = []
      messages << "missing: #{missing.join(', ')}" if missing.any?
      messages << "unwanted: #{unwanted.join(', ')}" if unwanted.any?

      warning(messages.join(', '))
    else
      ok("available: #{available_features.join(', ')}")
    end
  end

  def check
    res = features_response

    if res.code.to_i == 200
      available_features = parse_features_response(res)

      process_available_features(available_features)
    else
      critical(res.body)
    end
  end
end
